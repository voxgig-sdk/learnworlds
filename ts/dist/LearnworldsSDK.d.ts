import { AffiliateEntity } from './entity/AffiliateEntity';
import { BundleEntity } from './entity/BundleEntity';
import { CertificateEntity } from './entity/CertificateEntity';
import { CommunityCollectionEntity } from './entity/CommunityCollectionEntity';
import { CommunityPostEntity } from './entity/CommunityPostEntity';
import { CommunitySpaceEntity } from './entity/CommunitySpaceEntity';
import { CompleteEntity } from './entity/CompleteEntity';
import { CouponEntity } from './entity/CouponEntity';
import { CouponUsageEntity } from './entity/CouponUsageEntity';
import { CourseEntity } from './entity/CourseEntity';
import { CourseAnalyticEntity } from './entity/CourseAnalyticEntity';
import { CourseContentEntity } from './entity/CourseContentEntity';
import { EnrollmentEntity } from './entity/EnrollmentEntity';
import { EventLogEntity } from './entity/EventLogEntity';
import { GradeEntity } from './entity/GradeEntity';
import { InstallmentEntity } from './entity/InstallmentEntity';
import { InvoiceLinkEntity } from './entity/InvoiceLinkEntity';
import { LeadEntity } from './entity/LeadEntity';
import { PaymentEntity } from './entity/PaymentEntity';
import { PayoutCompletedEntity } from './entity/PayoutCompletedEntity';
import { PayoutDueEntity } from './entity/PayoutDueEntity';
import { PayoutDueUpcomingEntity } from './entity/PayoutDueUpcomingEntity';
import { ProductEntity } from './entity/ProductEntity';
import { PromotionEntity } from './entity/PromotionEntity';
import { ResetEntity } from './entity/ResetEntity';
import { SchoolEventEntity } from './entity/SchoolEventEntity';
import { SeatEntity } from './entity/SeatEntity';
import { SpaceEntity } from './entity/SpaceEntity';
import { SubscriptionPlanEntity } from './entity/SubscriptionPlanEntity';
import { UnitAnalyticEntity } from './entity/UnitAnalyticEntity';
import { UserEntity } from './entity/UserEntity';
import { UserGroupEntity } from './entity/UserGroupEntity';
import { UserProgressEntity } from './entity/UserProgressEntity';
import { UserResponseEntity } from './entity/UserResponseEntity';
import { UserRoleEntity } from './entity/UserRoleEntity';
import { UserSegmentEntity } from './entity/UserSegmentEntity';
import { UserSubscriptionEntity } from './entity/UserSubscriptionEntity';
import { inspect } from 'node:util';
import type { Context, Feature } from './types';
import { Utility } from './utility/Utility';
import { BaseFeature } from './feature/base/BaseFeature';
declare const utility: Utility;
declare class LearnworldsSDK {
    _mode: string;
    _options: any;
    _utility: Utility;
    _features: Feature[];
    _rootctx: Context;
    constructor(options?: any);
    options(): any;
    utility(): {
        addfeature: typeof import("./utility/AddfeatureUtility").addfeature;
        auth: typeof import("./utility/AuthUtility").auth;
        body: typeof import("./utility/BodyUtility").body;
        clean: typeof import("./utility/CleanUtility").clean;
        contextify: typeof import("./utility/ContextUtility").contextify;
        done: typeof import("./utility/DoneUtility").done;
        error: typeof import("./utility/ErrorUtility").error;
        featurehook: typeof import("./utility/FeaturehookUtility").featurehook;
        fetcher: typeof import("./utility/FetcherUtility").fetcher;
        findparam: typeof import("./utility/FindparamUtility").findparam;
        fullurl: typeof import("./utility/FullurlUtility").fullurl;
        headers: typeof import("./utility/HeadersUtility").headers;
        initfeature: typeof import("./utility/InitfeatureUtility").initfeature;
        method: typeof import("./utility/MethodUtility").method;
        operator: typeof import("./utility/OperatorUtility").operator;
        opify: typeof import("./utility/OperatorUtility").opify;
        options: typeof import("./utility/OptionsUtility").options;
        params: typeof import("./utility/ParamsUtility").params;
        query: typeof import("./utility/QueryUtility").query;
        reqform: typeof import("./utility/ReqformUtility").reqform;
        request: typeof import("./utility/RequestUtility").request;
        resbasic: typeof import("./utility/ResbasicUtility").resbasic;
        resbody: typeof import("./utility/ResbodyUtility").resbody;
        resform: typeof import("./utility/ResformUtility").resform;
        resheaders: typeof import("./utility/ResheadersUtility").resheaders;
        response: typeof import("./utility/ResponseUtility").response;
        result: typeof import("./utility/ResultUtility").result;
        spec: typeof import("./utility/SpecUtility").spec;
        struct: import("./utility/StructUtility").StructUtility;
    };
    Affiliate(data?: any): AffiliateEntity;
    Bundle(data?: any): BundleEntity;
    Certificate(data?: any): CertificateEntity;
    CommunityCollection(data?: any): CommunityCollectionEntity;
    CommunityPost(data?: any): CommunityPostEntity;
    CommunitySpace(data?: any): CommunitySpaceEntity;
    Complete(data?: any): CompleteEntity;
    Coupon(data?: any): CouponEntity;
    CouponUsage(data?: any): CouponUsageEntity;
    Course(data?: any): CourseEntity;
    CourseAnalytic(data?: any): CourseAnalyticEntity;
    CourseContent(data?: any): CourseContentEntity;
    Enrollment(data?: any): EnrollmentEntity;
    EventLog(data?: any): EventLogEntity;
    Grade(data?: any): GradeEntity;
    Installment(data?: any): InstallmentEntity;
    InvoiceLink(data?: any): InvoiceLinkEntity;
    Lead(data?: any): LeadEntity;
    Payment(data?: any): PaymentEntity;
    PayoutCompleted(data?: any): PayoutCompletedEntity;
    PayoutDue(data?: any): PayoutDueEntity;
    PayoutDueUpcoming(data?: any): PayoutDueUpcomingEntity;
    Product(data?: any): ProductEntity;
    Promotion(data?: any): PromotionEntity;
    Reset(data?: any): ResetEntity;
    SchoolEvent(data?: any): SchoolEventEntity;
    Seat(data?: any): SeatEntity;
    Space(data?: any): SpaceEntity;
    SubscriptionPlan(data?: any): SubscriptionPlanEntity;
    UnitAnalytic(data?: any): UnitAnalyticEntity;
    User(data?: any): UserEntity;
    UserGroup(data?: any): UserGroupEntity;
    UserProgress(data?: any): UserProgressEntity;
    UserResponse(data?: any): UserResponseEntity;
    UserRole(data?: any): UserRoleEntity;
    UserSegment(data?: any): UserSegmentEntity;
    UserSubscription(data?: any): UserSubscriptionEntity;
    static test(testopts?: any, sdkopts?: any): LearnworldsSDK;
    tester(testopts?: any, sdkopts?: any): LearnworldsSDK;
    toJSON(): {
        name: string;
    };
    toString(): string;
    [inspect.custom](): string;
}
declare class LearnworldsEntity {
}
declare const SDK: typeof LearnworldsSDK;
export { utility, BaseFeature, LearnworldsEntity, LearnworldsSDK, SDK, };
