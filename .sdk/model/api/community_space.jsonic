# Entity: community_space

main: api: entity: community_space: {

  alias: field: {}

  op: {
    list: {
      path: "/v2/community/spaces",
      pathalt: [
        {
          path: "/v2/community/spaces"
        }
      ],
      method: "get",
      kind: "res",
      param: {}

      query: {
        "Lw-Client": {
          required: true,
          name: "lw-client",
          Name: "LwClient",
          NAME: "LW-CLIENT",
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }

        Authorization: {
          required: true,
          name: "authorization",
          Name: "Authorization",
          NAME: "AUTHORIZATION",
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }

        access: {
          name: "access",
          Name: "Access",
          NAME: "ACCESS",
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }

        collectionId: {
          name: "collectionid",
          Name: "CollectionId",
          NAME: "COLLECTIONID",
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }

        usages: {
          name: "usages",
          Name: "Usages",
          NAME: "USAGES",
          type: "array",
          Type: "Array",
          TYPE: "ARRAY"
        }

        page: {
          required: false,
          name: "page",
          Name: "Page",
          NAME: "PAGE",
          type: "integer",
          Type: "Integer",
          TYPE: "INTEGER"
        }

        items_per_page: {
          name: "items_per_page",
          Name: "ItemsPerPage",
          NAME: "ITEMS_PER_PAGE",
          type: "integer",
          Type: "Integer",
          TYPE: "INTEGER"
        }
      }


      # resform derivation: list-single-array:data
      resform: "`body.data`",

      # reqform derivation: none
      reqform: "`body`",
      validate: {
        params: {
          "Lw-Client": "`$STRING`",
          Authorization: "`$STRING`"
        }
      }

      name: "list",
      Name: "List",
      NAME: "LIST"
    }

    create: {
      path: "/v2/community/spaces",
      pathalt: [
        {
          path: "/v2/community/spaces"
        }
      ],
      method: "post",
      kind: "req",
      param: {}

      query: {
        "Lw-Client": {
          required: true,
          name: "lw-client",
          Name: "LwClient",
          NAME: "LW-CLIENT",
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }

        Authorization: {
          required: true,
          name: "authorization",
          Name: "Authorization",
          NAME: "AUTHORIZATION",
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }
      }


      # resform derivation: default
      resform: "`body`",

      # reqform derivation: default
      reqform: "`reqdata`",
      validate: {
        params: {
          "Lw-Client": "`$STRING`",
          Authorization: "`$STRING`"
        }
      }

      name: "create",
      Name: "Create",
      NAME: "CREATE"
    }

    load: {
      path: "/v2/community/spaces/{id}",
      pathalt: [
        {
          path: "/v2/community/spaces/{id}",
          id: true
        }
      ],
      method: "get",
      kind: "res",
      param: {
        id: {
          required: true,
          name: "id",
          Name: "Id",
          NAME: "ID",
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }
      }

      query: {
        "Lw-Client": {
          required: true,
          name: "lw-client",
          Name: "LwClient",
          NAME: "LW-CLIENT",
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }

        Authorization: {
          required: true,
          name: "authorization",
          Name: "Authorization",
          NAME: "AUTHORIZATION",
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }
      }


      # resform derivation: default
      resform: "`body`",

      # reqform derivation: none
      reqform: "`body`",
      validate: {
        params: {
          id: "`$STRING`",
          "Lw-Client": "`$STRING`",
          Authorization: "`$STRING`"
        }
      }

      name: "load",
      Name: "Load",
      NAME: "LOAD"
    }

    update: {
      path: "/v2/community/spaces/{id}",
      pathalt: [
        {
          path: "/v2/community/spaces/{id}",
          id: true
        }
      ],
      method: "put",
      kind: "req",
      param: {
        id: {
          required: true,
          name: "id",
          Name: "Id",
          NAME: "ID",
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }
      }

      query: {
        Authorization: {
          required: true,
          name: "authorization",
          Name: "Authorization",
          NAME: "AUTHORIZATION",
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }

        "Lw-Client": {
          required: true,
          name: "lw-client",
          Name: "LwClient",
          NAME: "LW-CLIENT",
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }
      }


      # resform derivation: default
      resform: "`body`",

      # reqform derivation: default
      reqform: "`reqdata`",
      validate: {
        params: {
          id: "`$STRING`",
          Authorization: "`$STRING`",
          "Lw-Client": "`$STRING`"
        }
      }

      name: "update",
      Name: "Update",
      NAME: "UPDATE"
    }
  }

  field: {
    id: {
      name: "id",
      Name: "Id",
      NAME: "ID",
      type: "string",
      Type: "String",
      TYPE: "STRING",
      short: "Unique identifier of the space"
    }

    title: {
      name: "title",
      Name: "Title",
      NAME: "TITLE",
      type: "string",
      Type: "String",
      TYPE: "STRING",
      short: "Name of the space"
    }

    description: {
      name: "description",
      Name: "Description",
      NAME: "DESCRIPTION",
      type: "string",
      Type: "String",
      TYPE: "STRING",
      short: "Description of the space"
    }

    access: {
      name: "access",
      Name: "Access",
      NAME: "ACCESS",
      type: "string",
      enum: [
        "public",
        "private",
        "standalone"
      ],
      Type: "String",
      TYPE: "STRING",
      short: "Access type of the space\n"
    }

    owner: {
      name: "owner",
      Name: "Owner",
      NAME: "OWNER",
      type: "object",
      Type: "Object",
      TYPE: "OBJECT",
      short: "Information about the space owner"
    }

    usages: {
      name: "usages",
      Name: "Usages",
      NAME: "USAGES",
      type: "array",
      Type: "Array",
      TYPE: "ARRAY",
      short: "List of space usages in the platform"
    }

    hidden_from_community: {
      name: "hidden_from_community",
      Name: "HiddenFromCommunity",
      NAME: "HIDDEN_FROM_COMMUNITY",
      type: "boolean",
      Type: "Boolean",
      TYPE: "BOOLEAN",
      short: "Indication about whether the space is visible in the community"
    }

    is_invitation_required: {
      name: "is_invitation_required",
      Name: "IsInvitationRequired",
      NAME: "IS_INVITATION_REQUIRED",
      type: "boolean",
      Type: "Boolean",
      TYPE: "BOOLEAN",
      short: "Indication about whether users are sent an invitation to join or are directly added to space\n"
    }

    is_members_allowed_to_view_members: {
      name: "is_members_allowed_to_view_members",
      Name: "IsMembersAllowedToViewMembers",
      NAME: "IS_MEMBERS_ALLOWED_TO_VIEW_MEMBERS",
      type: "boolean",
      Type: "Boolean",
      TYPE: "BOOLEAN",
      short: "Indication about whether users can view other users in space"
    }

    collectionId: {
      name: "collectionid",
      Name: "CollectionId",
      NAME: "COLLECTIONID",
      type: "string",
      Type: "String",
      TYPE: "STRING",
      short: "Unique identifier of the collection under which the space is displayed"
    }
  }

  cmd: {}

  id: {
    name: "id",
    field: "id"
  }

  ancestors: [],
  name: "community_space",
  Name: "CommunitySpace",
  NAME: "COMMUNITY_SPACE",
  "key$": "community_space"


}
