# Entity: user_role

main: api: entity: user_role: {

  alias: field: {}

  op: {
    list: {
      path: "/v2/user-roles",
      pathalt: [
        {
          path: "/v2/user-roles"
        }
      ],
      method: "get",
      kind: "res",
      param: {}

      query: {
        role_id: {
          name: "role_id",
          Name: "RoleId",
          NAME: "ROLE_ID",
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }

        "Lw-Client": {
          required: true,
          name: "lw-client",
          Name: "LwClient",
          NAME: "LW-CLIENT",
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }

        Authorization: {
          required: true,
          name: "authorization",
          Name: "Authorization",
          NAME: "AUTHORIZATION",
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }

        access_level: {
          name: "access_level",
          Name: "AccessLevel",
          NAME: "ACCESS_LEVEL",
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }
      }


      # resform derivation: list-single-prop:data
      resform: "`body.data`",

      # reqform derivation: none
      reqform: "`body`",
      validate: {
        params: {
          "Lw-Client": "`$STRING`",
          Authorization: "`$STRING`"
        }
      }

      name: "list",
      Name: "List",
      NAME: "LIST"
    }

    load: {
      path: "/v2/users/{user_id}/user-role",
      pathalt: [
        {
          path: "/v2/users/{user_id}/user-role",
          user_id: true
        }
      ],
      method: "get",
      kind: "res",
      param: {
        user_id: {
          required: true,
          name: "user_id",
          Name: "UserId",
          NAME: "USER_ID",
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }
      }

      query: {
        Authorization: {
          required: true,
          name: "authorization",
          Name: "Authorization",
          NAME: "AUTHORIZATION",
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }

        "Lw-Client": {
          required: true,
          name: "lw-client",
          Name: "LwClient",
          NAME: "LW-CLIENT",
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }
      }


      # resform derivation: default
      resform: "`body`",

      # reqform derivation: none
      reqform: "`body`",
      validate: {
        params: {
          user_id: "`$STRING`",
          Authorization: "`$STRING`",
          "Lw-Client": "`$STRING`"
        }
      }

      name: "load",
      Name: "Load",
      NAME: "LOAD"
    }

    update: {
      path: "/v2/users/{user_id}/user-role",
      pathalt: [
        {
          path: "/v2/users/{user_id}/user-role",
          user_id: true
        }
      ],
      method: "put",
      kind: "req",
      param: {
        user_id: {
          required: true,
          name: "user_id",
          Name: "UserId",
          NAME: "USER_ID",
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }
      }

      query: {
        Authorization: {
          required: true,
          name: "authorization",
          Name: "Authorization",
          NAME: "AUTHORIZATION",
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }

        "Lw-Client": {
          required: true,
          name: "lw-client",
          Name: "LwClient",
          NAME: "LW-CLIENT",
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }
      }


      # resform derivation: default
      resform: "`body`",

      # reqform derivation: default
      reqform: "`reqdata`",
      validate: {
        params: {
          user_id: "`$STRING`",
          Authorization: "`$STRING`",
          "Lw-Client": "`$STRING`"
        }
      }

      name: "update",
      Name: "Update",
      NAME: "UPDATE"
    }
  }

  field: {
    id: {
      name: "id",
      Name: "Id",
      NAME: "ID",
      type: "string",
      Type: "String",
      TYPE: "STRING",
      short: "User Id or email (encoded string)"
    }

    email: {
      name: "email",
      Name: "Email",
      NAME: "EMAIL",
      type: "string",
      Type: "String",
      TYPE: "STRING",
      short: "Email account of the user"
    }

    username: {
      name: "username",
      Name: "Username",
      NAME: "USERNAME",
      type: "string",
      Type: "String",
      TYPE: "STRING",
      short: "Username of the user"
    }

    role_id: {
      name: "role_id",
      Name: "RoleId",
      NAME: "ROLE_ID",
      type: "string",
      Type: "String",
      TYPE: "STRING",
      short: "User Id or email"
    }

    user_role: {
      name: "user_role",
      Name: "UserRole",
      NAME: "USER_ROLE",
      type: "object",
      Type: "Object",
      TYPE: "OBJECT",
      short: "Values of the role fields for this user"
    }

    assigned_courses: {
      name: "assigned_courses",
      Name: "AssignedCourses",
      NAME: "ASSIGNED_COURSES",
      type: "array",
      Type: "Array",
      TYPE: "ARRAY",
      short: "Courses to be assigned to the instructor; empty if the user is not an instructor or if no courses should be assigned to the user.\n\n**Note**: If left empty, all previously assigned courses will be removed from the instructor."
    }

    assigned_seat_offering_ids: {
      name: "assigned_seat_offering_ids",
      Name: "AssignedSeatOfferingIds",
      NAME: "ASSIGNED_SEAT_OFFERING_IDS",
      type: "array",
      Type: "Array",
      TYPE: "ARRAY",
      short: "Unique identifier of the seat offerings to be assigned to the seat manager; empty if the user is not a seat manager or if no offerings should be assigned to the user.\n"
    }

    assigned_user_group_ids: {
      name: "assigned_user_group_ids",
      Name: "AssignedUserGroupIds",
      NAME: "ASSIGNED_USER_GROUP_IDS",
      type: "array",
      Type: "Array",
      TYPE: "ARRAY",
      short: "Unique identifier of the user groups to be assigned to the user group manager; empty if the user is not a group manager or if no groups should be assigned to the user.\n\nNote: If left empty, all previously assigned user groups will be removed from the group manager."
    }

    assigned_segment_id: {
      name: "assigned_segment_id",
      Name: "AssignedSegmentId",
      NAME: "ASSIGNED_SEGMENT_ID",
      type: "string",
      Type: "String",
      TYPE: "STRING",
      short: "Unique identifier of the segment to be assigned to the reporter; empty if the user is not a reporter or if no segment should be assigned to the user."
    }
  }

  cmd: {}

  id: {
    name: "id",
    field: "id"
  }

  ancestors: [],
  name: "user_role",
  Name: "UserRole",
  NAME: "USER_ROLE",
  "key$": "user_role"


}
