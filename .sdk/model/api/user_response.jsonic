# Entity: user_response

main: api: entity: user_response: {

  alias: field: {}

  op: {
    create: {
      path: "/v2/assessments/scores/{score_id}/review",
      pathalt: [
        {
          path: "/v2/assessments/scores/{score_id}/review",
          score_id: true
        }
      ],
      method: "post",
      kind: "req",
      param: {
        score_id: {
          required: true,
          name: "score_id",
          Name: "ScoreId",
          NAME: "SCORE_ID",
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }
      }

      query: {
        Authorization: {
          required: true,
          name: "authorization",
          Name: "Authorization",
          NAME: "AUTHORIZATION",
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }

        "Lw-Client": {
          required: true,
          name: "lw-client",
          Name: "LwClient",
          NAME: "LW-CLIENT",
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }

        undefined: {
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }
      }


      # resform derivation: default
      resform: "`body`",

      # reqform derivation: default
      reqform: "`reqdata`",
      validate: {
        params: {
          score_id: "`$STRING`",
          Authorization: "`$STRING`",
          "Lw-Client": "`$STRING`"
        }
      }

      name: "create",
      Name: "Create",
      NAME: "CREATE"
    }

    list: {
      path: "/v2/forms/{form_id}/responses",
      pathalt: [
        {
          path: "/v2/assessments/{assessment_id}/responses",
          assessment_id: true,
          form_id: false
        }

        {
          path: "/v2/forms/{form_id}/responses",
          form_id: true,
          assessment_id: false
        }
      ],
      method: "get",
      kind: "res",
      param: {
        assessment_id: {
          required: true,
          name: "assessment_id",
          Name: "AssessmentId",
          NAME: "ASSESSMENT_ID",
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }

        form_id: {
          required: true,
          name: "form_id",
          Name: "FormId",
          NAME: "FORM_ID",
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }
      }

      query: {
        Authorization: {
          required: true,
          name: "authorization",
          Name: "Authorization",
          NAME: "AUTHORIZATION",
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }

        "Lw-Client": {
          required: true,
          name: "lw-client",
          Name: "LwClient",
          NAME: "LW-CLIENT",
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }

        page: {
          required: false,
          name: "page",
          Name: "Page",
          NAME: "PAGE",
          type: "integer",
          Type: "Integer",
          TYPE: "INTEGER"
        }

        users: {
          name: "users",
          Name: "Users",
          NAME: "USERS",
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }

        items_per_page: {
          name: "items_per_page",
          Name: "ItemsPerPage",
          NAME: "ITEMS_PER_PAGE",
          type: "integer",
          Type: "Integer",
          TYPE: "INTEGER"
        }
      }


      # resform derivation: list-single-array:data
      resform: "`body.data`",

      # reqform derivation: none
      reqform: "`body`",
      validate: {
        params: {
          form_id: "`$STRING`",
          Authorization: "`$STRING`",
          "Lw-Client": "`$STRING`"
        }
      }

      name: "list",
      Name: "List",
      NAME: "LIST"
    }
  }

  field: {}

  cmd: {}

  id: {
    name: "id",
    field: "id"
  }

  ancestors: [
    "score"
  ],
  name: "user_response",
  Name: "UserResponse",
  NAME: "USER_RESPONSE",
  "key$": "user_response"


}
