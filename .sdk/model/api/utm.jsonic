# Entity: utm

main: api: entity: utm: {

  alias: field: {}

  op: {
    list: {
      path: "/v2/users/by-segment",
      pathalt: [
        {
          path: "/v2/affiliates/{affiliate_id}/customers",
          affiliate_id: true
        }

        {
          path: "/v2/affiliates/{affiliate_id}/leads",
          affiliate_id: true
        }

        {
          path: "/v2/courses/{course_id}/users",
          course_id: true
        }

        {
          path: "/v2/seats/{seat_id}/users",
          seat_id: true
        }

        {
          path: "/v2/user_groups/{user_group_id}/users",
          user_group_id: true
        }

        {
          path: "/v2/leads"
        }

        {
          path: "/v2/users"
        }

        {
          path: "/v2/users/by-product"
        }

        {
          path: "/v2/users/by-segment"
        }
      ],
      method: "get",
      kind: "res",
      param: {}

      query: {
        segment_id: {
          required: true,
          name: "segment_id",
          Name: "SegmentId",
          NAME: "SEGMENT_ID",
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }

        Authorization: {
          required: true,
          name: "authorization",
          Name: "Authorization",
          NAME: "AUTHORIZATION",
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }

        "Lw-Client": {
          required: true,
          name: "lw-client",
          Name: "LwClient",
          NAME: "LW-CLIENT",
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }

        page: {
          name: "page",
          Name: "Page",
          NAME: "PAGE",
          type: "integer",
          Type: "Integer",
          TYPE: "INTEGER"
        }
      }


      # resform derivation: list-single-array:data
      resform: "`body.data`",

      # reqform derivation: none
      reqform: "`body`",
      validate: {
        params: {
          segment_id: "`$STRING`",
          Authorization: "`$STRING`",
          "Lw-Client": "`$STRING`"
        }
      }

      name: "list",
      Name: "List",
      NAME: "LIST"
    }

    load: {
      path: "/v2/users/{id}",
      pathalt: [
        {
          path: "/v2/users/{id}",
          id: true
        }
      ],
      method: "get",
      kind: "res",
      param: {
        id: {
          required: true,
          name: "id",
          Name: "Id",
          NAME: "ID",
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }
      }

      query: {
        Authorization: {
          required: true,
          name: "authorization",
          Name: "Authorization",
          NAME: "AUTHORIZATION",
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }

        "Lw-Client": {
          required: true,
          name: "lw-client",
          Name: "LwClient",
          NAME: "LW-CLIENT",
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }

        include_suspended: {
          name: "include_suspended",
          Name: "IncludeSuspended",
          NAME: "INCLUDE_SUSPENDED",
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }
      }


      # resform derivation: default
      resform: "`body`",

      # reqform derivation: none
      reqform: "`body`",
      validate: {
        params: {
          id: "`$STRING`",
          Authorization: "`$STRING`",
          "Lw-Client": "`$STRING`"
        }
      }

      name: "load",
      Name: "Load",
      NAME: "LOAD"
    }

    update: {
      path: "/v2/users/{user_id}/unsuspend",
      pathalt: [
        {
          path: "/v2/users/{user_id}/suspend",
          user_id: true
        }

        {
          path: "/v2/users/{user_id}/tags",
          user_id: true
        }

        {
          path: "/v2/users/{user_id}/unsuspend",
          user_id: true
        }
      ],
      method: "put",
      kind: "req",
      param: {
        user_id: {
          required: true,
          name: "user_id",
          Name: "UserId",
          NAME: "USER_ID",
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }
      }

      query: {
        Authorization: {
          required: true,
          name: "authorization",
          Name: "Authorization",
          NAME: "AUTHORIZATION",
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }

        "Lw-Client": {
          required: true,
          name: "lw-client",
          Name: "LwClient",
          NAME: "LW-CLIENT",
          type: "string",
          Type: "String",
          TYPE: "STRING"
        }
      }


      # resform derivation: default
      resform: "`body`",

      # reqform derivation: none
      reqform: "`reqdata`",
      validate: {
        params: {
          user_id: "`$STRING`",
          Authorization: "`$STRING`",
          "Lw-Client": "`$STRING`"
        }
      }

      name: "update",
      Name: "Update",
      NAME: "UPDATE"
    }
  }

  field: {
    id: {
      name: "id",
      Name: "Id",
      NAME: "ID",
      type: "string",
      Type: "String",
      TYPE: "STRING",
      short: "Unique identifier of the user "
    }

    email: {
      name: "email",
      Name: "Email",
      NAME: "EMAIL",
      type: "string",
      Type: "String",
      TYPE: "STRING",
      short: "Email account of the user"
    }

    username: {
      name: "username",
      Name: "Username",
      NAME: "USERNAME",
      type: "string",
      Type: "String",
      TYPE: "STRING",
      short: "Username of the user"
    }

    subscribed_for_marketing_emails: {
      name: "subscribed_for_marketing_emails",
      Name: "SubscribedForMarketingEmails",
      NAME: "SUBSCRIBED_FOR_MARKETING_EMAILS",
      type: "boolean",
      typelist: [
        "boolean",
        "null"
      ],
      Type: "Boolean",
      TYPE: "BOOLEAN",
      short: "Indication about whether the user has agreed to receive marketing emails; true if she has agreed and thus should receive marketing emails, or false if she has not."
    }

    eu_customer: {
      name: "eu_customer",
      Name: "EuCustomer",
      NAME: "EU_CUSTOMER",
      type: "boolean",
      typelist: [
        "boolean",
        "null"
      ],
      Type: "Boolean",
      TYPE: "BOOLEAN",
      short: "Indication about whether the user is located in Europe; true if she is, or false if she is not located in Europe."
    }

    is_admin: {
      name: "is_admin",
      Name: "IsAdmin",
      NAME: "IS_ADMIN",
      type: "boolean",
      Type: "Boolean",
      TYPE: "BOOLEAN",
      short: "Indication about whether the user is an administrator of the school; true if she is, or false if she is not."
    }

    is_instructor: {
      name: "is_instructor",
      Name: "IsInstructor",
      NAME: "IS_INSTRUCTOR",
      type: "boolean",
      Type: "Boolean",
      TYPE: "BOOLEAN",
      short: "Indication about whether the user is an instructor in the school; true if she is, or false if she is not."
    }

    is_suspended: {
      name: "is_suspended",
      Name: "IsSuspended",
      NAME: "IS_SUSPENDED",
      type: "boolean",
      Type: "Boolean",
      TYPE: "BOOLEAN",
      short: "Indication about whether the user is suspended in the school; true if she is, or false if she is not."
    }

    is_reporter: {
      name: "is_reporter",
      Name: "IsReporter",
      NAME: "IS_REPORTER",
      type: "boolean",
      Type: "Boolean",
      TYPE: "BOOLEAN",
      short: "Indication about whether the user is an reporter in the school; true if she is, or false if she is not."
    }

    role: {
      name: "role",
      Name: "Role",
      NAME: "ROLE",
      type: "object",
      Type: "Object",
      TYPE: "OBJECT",
      short: "Values of the role fields for this user"
    }

    is_affiliate: {
      name: "is_affiliate",
      Name: "IsAffiliate",
      NAME: "IS_AFFILIATE",
      type: "boolean",
      Type: "Boolean",
      TYPE: "BOOLEAN",
      short: "Indication about whether the user is an affiliate of the school; true if she is, or false if she is not."
    }

    referrer_id: {
      name: "referrer_id",
      Name: "ReferrerId",
      NAME: "REFERRER_ID",
      type: "string",
      typelist: [
        "string",
        "null"
      ],
      Type: "String",
      TYPE: "STRING",
      short: "Unique user id of the referrer for this user"
    }

    last_login: {
      name: "last_login",
      Name: "LastLogin",
      NAME: "LAST_LOGIN",
      type: "number",
      typelist: [
        "null",
        "number"
      ],
      Type: "Number",
      TYPE: "NUMBER",
      short: "Date of the last login of the user, in UNIX timestamp format"
    }

    signup_approval_status: {
      name: "signup_approval_status",
      Name: "SignupApprovalStatus",
      NAME: "SIGNUP_APPROVAL_STATUS",
      type: "string",
      typelist: [
        "string",
        "null"
      ],
      Type: "String",
      TYPE: "STRING",
      short: "User status regarding the Signup Approval flow"
    }

    created: {
      name: "created",
      Name: "Created",
      NAME: "CREATED",
      type: "number",
      Type: "Number",
      TYPE: "NUMBER",
      short: "Date the user was created, in UNIX timestamp format"
    }

    fields: {
      name: "fields",
      Name: "Fields",
      NAME: "FIELDS",
      type: "object",
      Type: "Object",
      TYPE: "OBJECT",
      short: "Default sign up fields for the School. If custom sign up fields are enabled within the school settings, they are going to be included here too."
    }

    tags: {
      name: "tags",
      Name: "Tags",
      NAME: "TAGS",
      type: "array",
      Type: "Array",
      TYPE: "ARRAY",
      short: "Array of the tags of the user"
    }

    utms: {
      name: "utms",
      Name: "Utms",
      NAME: "UTMS",
      type: "object",
      Type: "Object",
      TYPE: "OBJECT",
      short: "Values of the UTM fields for this user"
    }

    billing_info: {
      name: "billing_info",
      Name: "BillingInfo",
      NAME: "BILLING_INFO",
      type: "object",
      typelist: [
        "object",
        "null"
      ],
      Type: "Object",
      TYPE: "OBJECT",
      short: "Values of the billing info fields for this user"
    }

    nps_score: {
      name: "nps_score",
      Name: "NpsScore",
      NAME: "NPS_SCORE",
      type: "integer",
      typelist: [
        "integer",
        "null"
      ],
      Type: "Integer",
      TYPE: "INTEGER",
      short: "The latest NPS score submitted by the user. (1-10)"
    }

    nps_comment: {
      name: "nps_comment",
      Name: "NpsComment",
      NAME: "NPS_COMMENT",
      type: "string",
      typelist: [
        "string",
        "null"
      ],
      Type: "String",
      TYPE: "STRING",
      short: "The latest comment submitted by the user on the NPS form."
    }
  }

  cmd: {}

  id: {
    name: "id",
    field: "id"
  }

  ancestors: [
    "affiliate"
  ],
  name: "utm",
  Name: "Utm",
  NAME: "UTM",
  "key$": "utm"


}
